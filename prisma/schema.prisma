// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  tests      Test[]
}

model Test {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  adminId     Int
  admin       Admin     @relation(fields: [adminId], references: [id])
  results     TestResult[]
  questions   Question[]       // One-to-many with Question
  duration    Int?
  isLive      Boolean   @default(false)
}

model Question {
  id           Int       @id @default(autoincrement())
  questionText String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  imageUrl     String? 
  testId       Int
  test         Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  options      Option[]
}

model Option {
  id          Int       @id @default(autoincrement())
  text        String
  isCorrect   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questionId  Int
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model TestResult {
  id        Int      @id @default(autoincrement())
  testId    Int
  score     Float
  createdAt DateTime @default(now())
  test      Test     @relation(fields: [testId], references: [id])

  // to store user info
  userName  String
  userPhone String
  userEmail String
}